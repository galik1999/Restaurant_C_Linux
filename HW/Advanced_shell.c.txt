#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <math.h>
#include <sys/wait.h>
#include <string.h>
#define MAX_LEN 2048


void Remove_BackSlash(char* command){
    //Removing the '\n' from the buffer which we read the command into.
    int i=0;
    while(command[i]!='\n'){
        i++;
    }
    command[i]='\0';
}

int Order_Args(char* command,char* arguments[4]){  
    //Counts the amount of tokens.
    // Divides the arguments of the input to array of arguments.
    char* token = strtok(command, " ");
    int i = 0;
    int countTokens=0;
    while (token != NULL) {
        arguments[i]=token;
        i++;
        countTokens++;
        token = strtok(NULL, " ");
    }
    arguments[i] = NULL;
    return countTokens;
}


int main(int argc,char* argv[]){
    char RestCommand[MAX_LEN];
    char command[MAX_LEN];
    char *arguments[5]; // array of strings, max number of parameters is 5.
    pid_t pid;
    int countTokens;
    if(argc > 4){
        perror("Unknown Command.\n");
        exit(1);
    }
    while(strcmp(command,"exit")!=0){
        printf("AdvShell>");
        fgets(command,MAX_LEN,stdin);
        //REMOVE BACKSLASH N.
        Remove_BackSlash(command);
        //Get all arguments in args array of strings.
        countTokens=Order_Args(command,arguments);
        //IMPORTANT: ORDER ARGS CHANGES THE COMMAND.
        //Exiting the program.
        if(strcmp(command,"exit")==0){
             printf("Goodbye.\n");
             exit(0);
        }
        //Creating a Menu.
        pid=fork();
        if(pid < 0){
            perror("fork.\n");
            exit(1);
        }
        if(pid == 0){
            //in the child process:
            //check if the command is a special command, if so: run the command with "execl" and its arguments.
            //otherwise, run the command regulary with the "execvp".
            if(strcmp(arguments[0],"CreateMenu") == 0){
                strcpy(RestCommand,arguments[0]);
                execl(RestCommand,RestCommand,arguments[1],arguments[2],NULL );
                printf("Not Supported\n");
                exit(1);
            }
            else if(strcmp(arguments[0],"getMenu") == 0){
                strcpy(RestCommand,arguments[0]);
                execl(RestCommand,RestCommand,arguments[1],NULL);
                printf("Not Supported\n");
                exit(1);
            }
            else if(strcmp(arguments[0],"getOrderNum") == 0){
                strcpy(RestCommand,arguments[0]);
                execl(RestCommand,RestCommand,arguments[1],NULL);
                printf("Not Supported\n");
                exit(1);

            }
            else if(strcmp(arguments[0],"getPrice") == 0){
                    if(countTokens==3){
                        strcpy(RestCommand,arguments[0]);
                        execl(RestCommand,RestCommand,arguments[1],arguments[2],NULL);
                        printf("Not Supported\n");
                        exit(1);
                        }
                    if(countTokens==4){
                        strcpy(RestCommand,arguments[0]);
                        execl(RestCommand,RestCommand,arguments[1],arguments[2],arguments[3],NULL);
                        printf("Not Supported\n");
                        exit(1);
                        }
                    }
                        
            else if(strcmp(arguments[0],"MakeOrder") == 0){
                strcpy(RestCommand,arguments[0]);
                execl(RestCommand,RestCommand,arguments[1],arguments[2],NULL);
                printf("Not Supported\n");
                exit(1);
            }
            else{
                execvp(arguments[0],&arguments[0]);
                printf("Not Supported\n");
                exit(1);
            }
        }
        //wait for the child process to terminate.
        if(pid != 0){wait(NULL);}
    }

    return 0;
}
